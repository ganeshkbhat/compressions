"use strict";import{Archive,ArchiveCompression,ArchiveFormat}from"libarchivejs/dist/libarchive-node.mjs";function isBrowser(){return("object"!=typeof process||"function"!=typeof require)&&"function"!=typeof importScripts&&("object"==typeof window||void 0)}let path,readFile;isBrowser()?path=require("path"):(path=require("path"),readFile=require("node:fs/promises").readFile);const compressed=["7z","aar","ace","arj","apk","arc","ark","br","bz","bz2","cab","chm","deb","dmg","ear","egg","epub","gz","jar","lha","lrz","lz","lz4","lzh","lzma","lzo","lzop","mar","par2","pea","pet","pkg","rar","rpm","rz","s7z","shar","sit","sitx","tbz","tbz2","tgz","tlz","txz","tzo","war","whl","xpi","xz","z","zip","zipx","zoo","zpaq","zst"],extensions=new Set(compressed),iscompressed=e=>extensions.has(path.extname(e).slice(1).toLowerCase()),setExtension=e=>extensions.push(e),getExtension=e=>extensions.get(e);function verifycompressed(){}async function compressNode(){Archive.init({workerUrl:"libarchive.js/dist/worker-bundle.js"});var e=await Archive.open(file);await e.usePassword(pass),await e.extractFiles(cb);await e.getFilesObject(),await e.getFilesArray()}async function decompressNode(e,s,r){Archive.init({workerUrl:"libarchive.js/dist/worker-bundle.js"});var i=await Archive.open(file);await i.hasEncryptedData(),await i.usePassword(s),await i.extractFiles(r);await i.getFilesObject(),await i.getFilesArray()}isBrowser()||(module.exports.iscompressed=iscompressed,module.exports.verifycompressed=verifycompressed,module.exports.compress=compressNode,module.exports.decompress=decompressNode,module.exports.setExtension=setExtension,module.exports.getExtension=getExtension,module.exports.zip=require("./exec.unzip").zip,module.exports.unzip=require("./exec.unzip").unzip,module.exports.default={verifycompressed:verifycompressed,iscompressed:iscompressed,compress:compress,decompress:decompress,setExtension:setExtension,getExtension:getExtension});